{
  
    
        "post0": {
            "title": "1이 커진다",
            "content": "nm = Block[{wo = 1}, Table[Graphics[{Style[Text[wo], 150 [Theta], FontFamily -&gt; &quot;굴림&quot;]}, ImageSize -&gt; {400, 400}, PlotRange -&gt; 1], { [Theta], 0, 2, 0.05}] ]; . ListAnimate[nm] . Export[&quot;one.gif&quot;, nm] . &#111;&#110;&#101;&#46;&#103;&#105;&#102; .",
            "url": "https://nb.mathnt.net/jupyter/mathematica/2021/02/04/%EC%9D%B4-%EC%BB%A4%EC%A7%84%EB%8B%A4.html",
            "relUrl": "/jupyter/mathematica/2021/02/04/%EC%9D%B4-%EC%BB%A4%EC%A7%84%EB%8B%A4.html",
            "date": " • Feb 4, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Pandas 간단 소개",
            "content": "Copyright 2017 Google LLC. . # Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an &quot;AS IS&quot; BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. . 학습 목표: . pandas 라이브러리의 DataFrame 및 Series 데이터 구조에 관한 소개 확인하기 | DataFrame 및 Series 내의 데이터 액세스 및 조작 | pandas DataFrame으로 CSV 데이터 가져오기 | DataFrame의 색인을 다시 생성하여 데이터 셔플 | . Pandas는 열 중심 데이터 분석 API입니다. 입력 데이터를 처리하고 분석하는 데 효과적인 도구이며, 여러 ML 프레임워크에서도 Pandas 데이터 구조를 입력으로 지원합니다. Pandas API를 전체적으로 소개하려면 길어지겠지만 중요한 개념은 꽤 간단하므로 아래에서 소개하도록 하겠습니다. 전체 내용을 참조할 수 있도록 Pandas 문서 사이트에서 광범위한 문서와 여러 가이드를 제공하고 있습니다. . &#44592;&#48376; &#44060;&#45392; . 다음 행은 Pandas API를 가져와서 API 버전을 출력합니다. . from __future__ import print_function import pandas as pd pd.__version__ . &#39;1.0.4&#39; . Pandas의 기본 데이터 구조는 두 가지 클래스로 구현됩니다. . DataFrame은 행 및 이름 지정된 열이 포함된 관계형 데이터 테이블이라고 생각할 수 있습니다. | Series는 하나의 열입니다. DataFrame에는 하나 이상의 Series와 각 Series의 이름이 포함됩니다. | . 데이터 프레임은 데이터 조작에 일반적으로 사용하는 추상화입니다. Spark 및 R에 유사한 구현이 존재합니다. . Series를 만드는 한 가지 방법은 Series 객체를 만드는 것입니다. 예를 들면 다음과 같습니다. . pd.Series([&#39;San Francisco&#39;, &#39;San Jose&#39;, &#39;Sacramento&#39;]) . 0 San Francisco 1 San Jose 2 Sacramento dtype: object . DataFrame 객체는 string 열 이름과 매핑되는 &#39;dict&#39;를 각각의 Series에 전달하여 만들 수 있습니다. Series의 길이가 일치하지 않는 경우, 누락된 값은 특수 NA/NaN 값으로 채워집니다. 예를 들면 다음과 같습니다. . city_names = pd.Series([&#39;San Francisco&#39;, &#39;San Jose&#39;, &#39;Sacramento&#39;]) population = pd.Series([852469, 1015785, 485199]) pd.DataFrame({ &#39;City name&#39;: city_names, &#39;Population&#39;: population }) . City name Population . 0 San Francisco | 852469 | . 1 San Jose | 1015785 | . 2 Sacramento | 485199 | . 하지만 대부분의 경우 전체 파일을 DataFrame으로 로드합니다. 다음 예는 캘리포니아 부동산 데이터가 있는 파일을 로드합니다. 다음 셀을 실행하여 데이터에 로드하고 기능 정의를 만들어 보세요. . california_housing_dataframe = pd.read_csv(&quot;https://download.mlcc.google.com/mledu-datasets/california_housing_train.csv&quot;, sep=&quot;,&quot;) california_housing_dataframe.describe() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value . count 17000.000000 | 17000.000000 | 17000.000000 | 17000.000000 | 17000.000000 | 17000.000000 | 17000.000000 | 17000.000000 | 17000.000000 | . mean -119.562108 | 35.625225 | 28.589353 | 2643.664412 | 539.410824 | 1429.573941 | 501.221941 | 3.883578 | 207300.912353 | . std 2.005166 | 2.137340 | 12.586937 | 2179.947071 | 421.499452 | 1147.852959 | 384.520841 | 1.908157 | 115983.764387 | . min -124.350000 | 32.540000 | 1.000000 | 2.000000 | 1.000000 | 3.000000 | 1.000000 | 0.499900 | 14999.000000 | . 25% -121.790000 | 33.930000 | 18.000000 | 1462.000000 | 297.000000 | 790.000000 | 282.000000 | 2.566375 | 119400.000000 | . 50% -118.490000 | 34.250000 | 29.000000 | 2127.000000 | 434.000000 | 1167.000000 | 409.000000 | 3.544600 | 180400.000000 | . 75% -118.000000 | 37.720000 | 37.000000 | 3151.250000 | 648.250000 | 1721.000000 | 605.250000 | 4.767000 | 265000.000000 | . max -114.310000 | 41.950000 | 52.000000 | 37937.000000 | 6445.000000 | 35682.000000 | 6082.000000 | 15.000100 | 500001.000000 | . 위의 예에서는 DataFrame.describe를 사용하여 DataFrame에 관한 흥미로운 통계를 보여줍니다. 또 다른 유용한 함수는 DataFrame.head로, DataFrame 레코드 중 처음 몇 개만 표시합니다. . california_housing_dataframe.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value . 0 -114.31 | 34.19 | 15.0 | 5612.0 | 1283.0 | 1015.0 | 472.0 | 1.4936 | 66900.0 | . 1 -114.47 | 34.40 | 19.0 | 7650.0 | 1901.0 | 1129.0 | 463.0 | 1.8200 | 80100.0 | . 2 -114.56 | 33.69 | 17.0 | 720.0 | 174.0 | 333.0 | 117.0 | 1.6509 | 85700.0 | . 3 -114.57 | 33.64 | 14.0 | 1501.0 | 337.0 | 515.0 | 226.0 | 3.1917 | 73400.0 | . 4 -114.57 | 33.57 | 20.0 | 1454.0 | 326.0 | 624.0 | 262.0 | 1.9250 | 65500.0 | . Pandas의 또 다른 강력한 기능은 그래핑입니다. 예를 들어 DataFrame.hist를 사용하면 한 열에서 값의 분포를 빠르게 검토할 수 있습니다. . california_housing_dataframe.hist(&#39;housing_median_age&#39;) . array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x7f9ef5c71668&gt;]], dtype=object) . &#45936;&#51060;&#53552; &#50529;&#49464;&#49828; . 익숙한 Python dict/list 작업을 사용하여 DataFrame 데이터에 액세스할 수 있습니다. . cities = pd.DataFrame({ &#39;City name&#39;: city_names, &#39;Population&#39;: population }) print(type(cities[&#39;City name&#39;])) cities[&#39;City name&#39;] . &lt;class &#39;pandas.core.series.Series&#39;&gt; . 0 San Francisco 1 San Jose 2 Sacramento Name: City name, dtype: object . print(type(cities[&#39;City name&#39;][1])) cities[&#39;City name&#39;][1] . &lt;class &#39;str&#39;&gt; . &#39;San Jose&#39; . print(type(cities[0:2])) cities[0:2] . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; . City name Population . 0 San Francisco | 852469 | . 1 San Jose | 1015785 | . 또한 Pandas는 고급 색인 생성 및 선택 기능을 위한 풍부한 API를 제공합니다. 이 내용은 너무 광범위하므로 여기에서 다루지 않습니다. . &#45936;&#51060;&#53552; &#51312;&#51089; . Python의 기본 산술 연산을 Series에 적용할 수도 있습니다. 예를 들면 다음과 같습니다. . population / 1000. . 0 852.469 1 1015.785 2 485.199 dtype: float64 . NumPy는 유명한 계산과학 툴킷입니다. Pandas Series는 대부분의 NumPy 함수에 인수로 사용할 수 있습니다. . import numpy as np np.log(population) . 0 13.655892 1 13.831172 2 13.092314 dtype: float64 . 더 복잡한 단일 열 변환에는 Series.apply를 사용할 수 있습니다. Python map 함수처럼, Series.apply는 인수로 lambda 함수를 허용하며, 이는 각 값에 적용됩니다. . 아래의 예에서는 인구가 백만 명을 초과하는지 나타내는 새 Series를 만듭니다. . population.apply(lambda val: val &gt; 1000000) . 0 False 1 True 2 False dtype: bool . DataFrames 수정 역시 간단합니다. 예를 들어 다음 코드는 기존 DataFrame에 두 개의 Series를 추가합니다. . cities[&#39;Area square miles&#39;] = pd.Series([46.87, 176.53, 97.92]) cities[&#39;Population density&#39;] = cities[&#39;Population&#39;] / cities[&#39;Area square miles&#39;] cities . City name Population Area square miles Population density . 0 San Francisco | 852469 | 46.87 | 18187.945381 | . 1 San Jose | 1015785 | 176.53 | 5754.177760 | . 2 Sacramento | 485199 | 97.92 | 4955.055147 | . &#49892;&#49845; #1 . 다음 두 명제 모두 True인 경우에만 True인 새 부울 열을 추가하여 도시 테이블을 수정합니다. . 도시 이름은 성인의 이름을 본따서 지었다. | 도시 면적이 130제곱킬로미터보다 넓다. | . 참고: 부울 Series는 기존 부울 연산자가 아닌 비트 연산자를 사용하여 결합할 수 있습니다. 예를 들어 logical and를 실행할 때 and 대신 &amp;를 사용합니다. . 참고: 스페인어에서 &quot;San&quot;은 &quot;성인&quot;의 의미입니다. . # Your code here . &#54644;&#44208; &#48169;&#48277; . 해결 방법을 보려면 아래를 클릭하세요. . cities[&#39;Is wide and has saint name&#39;] = (cities[&#39;Area square miles&#39;] &gt; 50) &amp; cities[&#39;City name&#39;].apply(lambda name: name.startswith(&#39;San&#39;)) cities . City name Population Area square miles Population density Is wide and has saint name . 0 San Francisco | 852469 | 46.87 | 18187.945381 | False | . 1 San Jose | 1015785 | 176.53 | 5754.177760 | True | . 2 Sacramento | 485199 | 97.92 | 4955.055147 | False | . &#49353;&#51064; . Series와 DataFrame 객체 모두 식별자 값을 각 Series 항목이나 DataFrame 행에 할당하는 index 속성을 정의합니다. . 기본적으로 생성 시 Pandas는 소스 데이터의 순서를 나타내는 색인 값을 할당합니다. 생성된 이후 색인 값은 고정됩니다. 즉, 데이터의 순서가 재정렬될 때 변하지 않습니다. . city_names.index . RangeIndex(start=0, stop=3, step=1) . cities.index . RangeIndex(start=0, stop=3, step=1) . DataFrame.reindex를 호출하여 수동으로 행의 순서를 재정렬합니다. 예를 들어 다음은 도시 이름을 기준으로 분류하는 것과 효과가 같습니다. . cities.reindex([2, 0, 1]) . City name Population Area square miles Population density Is wide and has saint name . 2 Sacramento | 485199 | 97.92 | 4955.055147 | False | . 0 San Francisco | 852469 | 46.87 | 18187.945381 | False | . 1 San Jose | 1015785 | 176.53 | 5754.177760 | True | . 색인 재생성은 DataFrame을 섞기(임의 설정하기) 위한 좋은 방법입니다. 아래의 예에서는 배열처럼 된 색인을 NumPy의 random.permutation 함수에 전달하여 값을 섞습니다. 이렇게 섞인 배열로 reindex를 호출하면 DataFrame 행도 같은 방식으로 섞입니다. 다음 셀을 여러 번 실행해 보세요. . cities.reindex(np.random.permutation(cities.index)) . City name Population Area square miles Population density Is wide and has saint name . 1 San Jose | 1015785 | 176.53 | 5754.177760 | True | . 2 Sacramento | 485199 | 97.92 | 4955.055147 | False | . 0 San Francisco | 852469 | 46.87 | 18187.945381 | False | . 자세한 정보는 색인 문서를 참조하세요. . &#49892;&#49845; #2 . reindex 메서드는 원래 DataFrame의 색인 값에 없는 색인 값을 허용합니다. 메서드를 실행해보고 이런 값을 사용하면 어떤 결과가 나오는지 확인해보세요. 왜 이런 값이 허용된다고 생각하나요? . # Your code here . &#54644;&#44208; &#48169;&#48277; . 해결 방법을 보려면 아래를 클릭하세요. . reindex 입력 배열에 원래 DataFrame 색인 값에 없는 값을 포함하면 reindex가 이 &#39;누락된 &#39; 색인에 새 행을 추가하고 모든 해당 열을 NaN 값으로 채웁니다. . cities.reindex([0, 4, 5, 2]) . City name Population Area square miles Population density Is wide and has saint name . 0 San Francisco | 852469.0 | 46.87 | 18187.945381 | False | . 4 NaN | NaN | NaN | NaN | NaN | . 5 NaN | NaN | NaN | NaN | NaN | . 2 Sacramento | 485199.0 | 97.92 | 4955.055147 | False | . 색인은 보통 실제 데이터에서 가져온 문자열이기 때문에 이 동작이 바람직합니다(Pandas 색인 재생성 문서에서 색인 값이 브라우저 이름인 예제 참조). . 이 경우 &#39;누락된 &#39; 색인을 허용하면 외부 목록을 사용하여 쉽게 색인을 다시 생성할 수 있으므로, 입력 처리에 대해 걱정하지 않아도 됩니다. .",
            "url": "https://nb.mathnt.net/2021/02/04/intro_to_pandas.html",
            "relUrl": "/2021/02/04/intro_to_pandas.html",
            "date": " • Feb 4, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Test Audio",
            "content": "# Needed imports import numpy as np from IPython.display import Audio from scipy.io import wavfile . We don&#39;t really need that, but we can also import our own modules available in GitHub . In this case we will load the calc module to display graphs . Any Python module can be loaded this way . Modules can also be loaded in the virtual machine using the pip installer . # Set to True if we are in colaboratory of False elsewere colaboratory = True if colaboratory: # Load the calc module !rm calc.* !wget https://raw.githubusercontent.com/R6500/Python-bits/master/Modules/calc.py #Import the module import calc # Erase output after import from IPython.display import clear_output clear_output() # Check loaded module try: print(&#39;calc version: &#39;,calc.version) except: print(&#39;Error loading the calc module&#39;) . calc version: 2/7/2018B . We can create the audio using code thanks to the numpy math facilities . # Create a sound framerate = 44100 t = np.linspace(0,5,framerate*5) data = np.sin(2*np.pi*220*t) + np.sin(2*np.pi*224*t) . The sound can be shown using, for instance, the loaded calc module. . It could also be shown using direct calls the matplotlib module . # Indicate the calc module if we are inside colaboratory calc.setColaboratory(colaboratory) # Show waveform calc.plot11(t,data,&quot;Sound Waveform&quot;,&quot;Time (s)&quot;,&quot;Value&quot;) # We can zoom the start of the waveform calc.plot11(t[0:10000],data[0:10000],&quot;Sound Waveform (Detail)&quot;,&quot;Time (s)&quot;,&quot;Value&quot;) . The following code plays the sound data in mono . # Generate a player for mono sound Audio(data,rate=framerate) . Your browser does not support the audio element. Sound can be played automatically after the cell code ends by using the autoplay parameter . This is shown on the following example . # Take a 1s piece of the mono sound data2 = data[0:framerate] # Generate a player for mono sound Audio(data2,rate=framerate,autoplay=True) . Your browser does not support the audio element. Audio data can also be generated in stereo . We will first generate and show the waveforms . # Base sound def base(t): return np.sin(2*np.pi*220*t)*np.exp(-t) tLeft = 4*(t/4 - np.fix(t/4)) left = base(tLeft) tRight = 4*((t+2)/4 - np.fix((t+2)/4)) right = base(tRight) # Show sound calc.plot1n(t,[left,right],&quot;Stereo sound&quot;,&quot;Time(s)&quot;,&quot;Values&quot;,[&quot;Left&quot;,&quot;Right&quot;]) . Now we can play the sound data in stereo . # Can also do stereo or more channels Audio([left, right],rate=framerate) . Your browser does not support the audio element. The sound data don&#39;t need to be generated from code, it can be loade from wav files . In the case of Jupyter notebooks they can be in your computer . In the case of Colaboratory notebooks they need to be available on internet . One way to make a file available on internet is using GitHub . if colaboratory: # Load sound file from GitHub !wget https://github.com/R6500/Python-bits/raw/master/Colaboratory/Sounds/Bicycle%20bell%203.wav # Erase output after import from IPython.display import clear_output clear_output() print(&quot;Bicycle bell 3.wav loaded&quot;) else: print(&quot;We are not in colaboratory&quot;) print(&quot;The file shall already be in the computer&quot;) . Bicycle bell 3.wav loaded . Once the file is saved in the virtual machine, it can be read on a numpy array and decoded as sound information . # Load the file on an object data = wavfile.read(&#39;Bicycle bell 3.wav&#39;) # Separete the object elements framerate = data[0] sounddata = data[1] time = np.arange(0,len(sounddata))/framerate # Show information about the object print(&#39;Sample rate:&#39;,framerate,&#39;Hz&#39;) print(&#39;Total time:&#39;,len(sounddata)/framerate,&#39;s&#39;) . Sample rate: 48000 Hz Total time: 19.4594375 s . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: WavFileWarning: Chunk (non-data) not understood, skipping it. . The loaded sound data can be shown on a graph, if needed . # Show the sound data calc.plot11(time,sounddata,&quot;Sound data loaded from wav file&quot;,&quot;Time (s)&quot;,&quot;Values&quot;) . And, of course, it can be played . # Generate a player for mono sound Audio(sounddata,rate=framerate) . Your browser does not support the audio element.",
            "url": "https://nb.mathnt.net/2021/02/04/Manipulating_audios.html",
            "relUrl": "/2021/02/04/Manipulating_audios.html",
            "date": " • Feb 4, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "genus of quadratic forms",
            "content": "from sage.quadratic_forms.genera.genus import Genus from sage.quadratic_forms.genera.genus import GenusSymbol_global_ring A = DiagonalQuadraticForm(ZZ, [-1, 2, -3, 4, -5, 6, -7, 8, -9]).Hessian_matrix() Genus(A) . Genus of [ -2 0 0 0 0 0 0 0 0] [ 0 4 0 0 0 0 0 0 0] [ 0 0 -6 0 0 0 0 0 0] [ 0 0 0 8 0 0 0 0 0] [ 0 0 0 0 -10 0 0 0 0] [ 0 0 0 0 0 12 0 0 0] [ 0 0 0 0 0 0 -14 0 0] [ 0 0 0 0 0 0 0 16 0] [ 0 0 0 0 0 0 0 0 -18] Signature: (4, 5) Genus symbol at 2: [2^-5 4^2 8^1 16^1]_1 Genus symbol at 3: 1^6 3^2 9^1 Genus symbol at 5: 1^8 5^-1 Genus symbol at 7: 1^-8 7^-1 . from sage.quadratic_forms.genera.genus import p_adic_symbol from sage.quadratic_forms.genera.genus import Genus_Symbol_p_adic_ring . p=3 G3 = Genus_Symbol_p_adic_ring(p, p_adic_symbol(A, p, 2)); G3 . Genus symbol at 3: 1^6 3^2 9^1 . p=5 G5 = Genus_Symbol_p_adic_ring(5, p_adic_symbol(A, 5, 2)); G5 . Genus symbol at 5: 1^8 5^-1 . p=7 G7 = Genus_Symbol_p_adic_ring(7, p_adic_symbol(A, 7, 2)); G7 . Genus symbol at 7: 1^-8 7^-1 .",
            "url": "https://nb.mathnt.net/jupyter/sagemath/2021/02/04/Genus-symbol.html",
            "relUrl": "/jupyter/sagemath/2021/02/04/Genus-symbol.html",
            "date": " • Feb 4, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Install",
            "content": ". Note: If you get an error message the first time you run something you may have to clone the ThinkDSP library. To do this go to &quot;Runtime-&gt;reset all runtimes&quot;, then press the run button in the &quot;Install&quot; section to clone the dependency into your runtime. . !git clone https://github.com/AllenDowney/ThinkDSP.git . Cloning into &#39;ThinkDSP&#39;... remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. remote: Total 2086 (delta 3), reused 15 (delta 3), pack-reused 2071 Receiving objects: 100% (2086/2086), 190.45 MiB | 31.48 MiB/s, done. Resolving deltas: 100% (1108/1108), done. . . Generation of sin wave . This is how it is possible to generate a sin wave. . # This file shows how to generate a sine wave using the ThinkDSP library. import sys sys.path.insert(0, &#39;ThinkDSP/code/&#39;) import thinkdsp import matplotlib.pyplot as pyplot import IPython # Generate wave sin = thinkdsp.SinSignal(freq=400, amp=0.5) # Where freq is the frequency and amp is the amplitude of the sine wave wave = sin.make_wave(duration=2, start=0, framerate=44100) # Turn the sin wave into an audio wave # Plot wave period = sin.period segment = wave.segment(start=0, duration=period*3) segment.plot() pyplot.show() # Play wave wave.play() IPython.display.Audio(&#39;sound.wav&#39;) # This is required on Google Colab due to compatibility issues . Writing sound.wav . Your browser does not support the audio element. Challenges: . Can you change it to a higher pitch? What about a lower pitch? Can you increase the lenth of the sound? . Consider this:&gt; What do you think will happen if multiple sin waves are played at the same time? . . Adding Waves Together . This is how 2 sin waves can be added together. Look at the graph and see how to output wave changes when 2 sounds are added together . import sys sys.path.insert(0, &#39;ThinkDSP/code/&#39;) import thinkdsp import matplotlib.pyplot as pyplot import IPython # Generate wave sin1 = thinkdsp.SinSignal(freq=400, amp=0.5) sin2 = thinkdsp.SinSignal(freq=800, amp=0.3) mix = sin1 + sin2 # Notice here how 2 waves can be added together wave = mix.make_wave(duration=2, start=0, framerate=44100) # Plot wave period = mix.period segment = wave.segment(start=0, duration=period*3) segment.plot() pyplot.show() # Play wave wave.play() IPython.display.Audio(&#39;sound.wav&#39;) . Writing sound.wav . Your browser does not support the audio element. Challenge: . Can you add 3 waves together, what about 4, or 5? . Consider this:&gt; Do you think there is a better way to graph this data? . . Frequency Domain . Now we will take the previously generated sound and look at it in frequency domain. This is where rather than seeing what the wave looks like we see the frequencies that make up the wave . import sys sys.path.insert(0, &#39;ThinkDSP/code/&#39;) import thinkdsp import matplotlib.pyplot as pyplot import IPython # Generate wave sin1 = thinkdsp.SinSignal(freq=400, amp=0.5) sin2 = thinkdsp.SinSignal(freq=800, amp=0.3) mix = sin1 + sin2 # Notice here how 2 waves can be added together wave = mix.make_wave(duration=2, start=0, framerate=44100) # Plot spectrum of wave spectrum = wave.make_spectrum() spectrum.plot() pyplot.show() # Play wave wave.play() IPython.display.Audio(&#39;sound.wav&#39;) . Writing sound.wav . Your browser does not support the audio element. Challenge: . Can you increase the higher frequencies to have a higher amplitude? What happens when you add more waves to the mix? . Consider this:&gt; What do you think a frequency domain plot of a song would look like . . Reading An Audio File . !git clone https://github.com/Tyler-Hilbert/AudioProcessingInPythonWorkshop.git . Cloning into &#39;AudioProcessingInPythonWorkshop&#39;... remote: Enumerating objects: 37, done. remote: Counting objects: 100% (37/37), done. remote: Compressing objects: 100% (25/25), done. remote: Total 37 (delta 16), reused 33 (delta 12), pack-reused 0 Unpacking objects: 100% (37/37), done. . import sys sys.path.insert(0, &#39;ThinkDSP/code/&#39;) import thinkdsp import matplotlib.pyplot as pyplot import IPython # Read in audio file # FIXME - will this work for non wav files wave = thinkdsp.read_wave(&#39;AudioProcessingInPythonWorkshop/test.wav&#39;) # Grab first 10 seconds of audio (you can ignore me) clipLength = 10 # in seconds index = 0 while (index &lt; wave.ts.size and wave.ts[index] &lt; clipLength): index += 1 # Remove extras wave.ts = wave.ts[:index] wave.ys = wave.ys[:index] # Plot spectrum of audio file spectrum = wave.make_spectrum() spectrum.plot() pyplot.show() # Play audio file wave.play() IPython.display.Audio(&#39;sound.wav&#39;) . Writing sound.wav . Your browser does not support the audio element. . Filtering . Now we will apply a filter to the sound. A low pass filter will remove high frequencies while a high pass filter will remove low frequencies. Think of a low pass filter as increasing bass and a high pass filter as increasing treble. . This piece of code will apply a low pass filter. Listen to how it sounds different, then compare how the frequencies changed from the last graph. . import sys sys.path.insert(0, &#39;ThinkDSP/code/&#39;) import thinkdsp import matplotlib.pyplot as pyplot import IPython # Read in audio file wave = thinkdsp.read_wave(&#39;AudioProcessingInPythonWorkshop/test.wav&#39;) # Grab first 10 seconds of audio (you can ignore me) clipLength = 10 # in seconds index = 0 while (index &lt; wave.ts.size and wave.ts[index] &lt; clipLength): index += 1 # Remove extras wave.ts = wave.ts[:index] wave.ys = wave.ys[:index] # Filter spectrum = wave.make_spectrum() spectrum.low_pass(cutoff = 500, factor = .1) #spectrum.high_pass(cutoff = 1500, factor = .1) # FIXME - Change back to low pass filter filteredWave = spectrum.make_wave() # Plot spectrum of audio file spectrum = filteredWave.make_spectrum() spectrum.plot() pyplot.show() # Play filtered audio file filteredWave.play() IPython.display.Audio(&#39;sound.wav&#39;) . Writing sound.wav . Your browser does not support the audio element. Challenge: . Try to decrease of increase the amount of &quot;bass&quot; Try to change the change of frequencies that are filtered out Change the low pass filter to a high pass filter (by switching the comments) and see how it changes . Consider this:&gt; Why do you think the high pass filter sounds poorly? . . I am assuming you have tried the high pass filter and noticed how bad it sounds, and the volume decreasing. We will now fix this by adding the filtered sound back into the original sound. . import sys sys.path.insert(0, &#39;ThinkDSP/code/&#39;) import thinkdsp import matplotlib.pyplot as pyplot import IPython # Read in audio file wave = thinkdsp.read_wave(&#39;AudioProcessingInPythonWorkshop/test.wav&#39;) # Grab first 10 seconds of audio (you can ignore me) clipLength = 10 # in seconds index = 0 while (index &lt; wave.ts.size and wave.ts[index] &lt; clipLength): index += 1 # Remove extras wave.ts = wave.ts[:index] wave.ys = wave.ys[:index] # Filter spectrum = wave.make_spectrum() spectrum.high_pass(cutoff = 1500, factor = .1) # FIXME - Change back to low pass filter filteredWave = spectrum.make_wave() # Add filtered wave to original wave filteredWave.ys *= 10 # Increase the filtered wave&#39;s power so the treble effect is more noticable combinedWave = filteredWave + wave # Plot spectrum of audio file spectrum = wave.make_spectrum() spectrum.plot() pyplot.show() # Play filtered audio file combinedWave.play() IPython.display.Audio(&#39;sound.wav&#39;) . Writing sound.wav . ThinkDSP/code/thinkdsp.py:1125: UserWarning: Warning: normalizing before quantizing. warnings.warn(&#39;Warning: normalizing before quantizing.&#39;) . Your browser does not support the audio element. . Try it with a different song by replacing the loaded wave from the previous examples (you&#39;ll need to run the &quot;Extract wav from mp3&quot; code to get the rock.wav file first): . wave = thinkdsp.read_wave(&#39;AudioProcessingInPythonWorkshop/rock.wav&#39;) # Paste this into the previous examples . Thanks For Attending . Special thanks to ThinkDSP and Fort Collins Data Science Meetup . Extract wav from mp3 . import subprocess subprocess.call([&#39;ffmpeg&#39;, &#39;-i&#39;, &#39;AudioProcessingInPythonWorkshop/rock.mp3&#39;, &#39;AudioProcessingInPythonWorkshop/rock.wav&#39;]) . 0 . view file system . import subprocess p = subprocess.Popen(&#39;ls&#39;, shell=True, stdout=subprocess.PIPE) print(str(p.communicate()[0], &#39;utf-8&#39;)) . AudioProcessingInPythonWorkshop sample_data sound.wav ThinkDSP .",
            "url": "https://nb.mathnt.net/2021/02/04/AudioProcessingInPython.html",
            "relUrl": "/2021/02/04/AudioProcessingInPython.html",
            "date": " • Feb 4, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Example 1.1.8 (1) (computation in fields)",
            "content": "ring A=0,x,dp; . number n=12345/6789; . n^5; . 1179910858126071875/59350279669807543 .",
            "url": "https://nb.mathnt.net/jupyter/singular/2020/06/17/Example-1.1.8-(1)-(computation-in-fields).html",
            "relUrl": "/jupyter/singular/2020/06/17/Example-1.1.8-(1)-(computation-in-fields).html",
            "date": " • Jun 17, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nb.mathnt.net/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nb.mathnt.net/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "mass of quadratic forms",
            "content": "see local file &quot;/usr/lib/python2.7/dist-packages/sage/quadratic_forms/quadratic_formmassSiegel_densities.py&quot; . Q = DiagonalQuadraticForm(ZZ, [1,1]); for p in [3,5,7,11,13,17,19] : print([p,Q.Pall_mass_density_at_odd_prime(p)]) . [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 1 0 ] [ * 1 ])] [(0, 2, 4)] [2/3] 2/3 [3, 2/3] [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 1 0 ] [ * 1 ])] [(0, 2, 4)] [6/5] 6/5 [5, 6/5] [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 1 0 ] [ * 1 ])] [(0, 2, 4)] [6/7] 6/7 [7, 6/7] [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 1 0 ] [ * 1 ])] [(0, 2, 4)] [10/11] 10/11 [11, 10/11] [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 1 0 ] [ * 1 ])] [(0, 2, 4)] [14/13] 14/13 [13, 14/13] [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 1 0 ] [ * 1 ])] [(0, 2, 4)] [18/17] 18/17 [17, 18/17] [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 1 0 ] [ * 1 ])] [(0, 2, 4)] [18/19] 18/19 [19, 18/19] . Q=QuadraticForm(ZZ, 4, [1,1,1,1,1,0,1,2,2,2]) Q.Gram_matrix_rational() . [ 1 1/2 1/2 1/2] [1/2 1 0 1/2] [1/2 0 2 1] [1/2 1/2 1 2] . Q = DiagonalQuadraticForm(ZZ, [1,3]) Q.Pall_mass_density_at_odd_prime(3) . [(0, Quadratic form in 1 variables over Integer Ring with coefficients: [ 1 ]), (1, Quadratic form in 1 variables over Integer Ring with coefficients: [ 1 ])] [(0, 1, 2), (1, 1, 2)] [1, 1] 2 . 2 . Q.Pall_mass_density_at_odd_prime(5) . [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 1 0 ] [ * 3 ]), (1, Quadratic form in 2 variables over Integer Ring with coefficients: [ 12 0 ] [ * 36 ])] [(0, 2, 12), (1, 2, 1728)] [4/5, 4/5] 32/125 . 32/125 . Q=QuadraticForm(ZZ, 4, [2,2,2,2,2,0,2,4,4,4]) Q.Pall_mass_density_at_odd_prime(5) . [(0, Quadratic form in 2 variables over Integer Ring with coefficients: [ 2 0 ] [ * 6 ]), (1, Quadratic form in 2 variables over Integer Ring with coefficients: [ 24 0 ] [ * 72 ])] [(0, 2, 48), (1, 2, 6912)] [4/5, 4/5] 32/125 . 32/125 . Q = DiagonalQuadraticForm(ZZ, [1,1,1]) Q.Kitaoka_mass_at_2() . 1/2 . Q = DiagonalQuadraticForm(ZZ, [1,1,1]) Q.Watson_mass_at_2() . 384 . Print(&quot;a&quot;) . NameError Traceback (most recent call last) &lt;ipython-input-15-b33d3f360c16&gt; in &lt;module&gt;() -&gt; 1 Print(&#34;a&#34;) NameError: name &#39;Print&#39; is not defined .",
            "url": "https://nb.mathnt.net/jupyter/sagemath/2019/01/23/mass-of-quadratic-forms.html",
            "relUrl": "/jupyter/sagemath/2019/01/23/mass-of-quadratic-forms.html",
            "date": " • Jan 23, 2019"
        }
        
    
  
    
        ,"post9": {
            "title": "Title",
            "content": "n = numerical_eigenforms(1,24) n.ap(2) . [8388609.0, -4016.3511717179363, 5096.35117171844] . n.ap(3) . [177148.0, 252.00000000001896] . eisenstein_series_qexp(24, 5, normalization=&#39;integral&#39;) . 236364091 + 131040*q + 1099243323360*q^2 + 12336522153621120*q^3 + 9221121336284413920*q^4 + O(q^5) .",
            "url": "https://nb.mathnt.net/2019/01/09/hecke-eigenvalues.html",
            "relUrl": "/2019/01/09/hecke-eigenvalues.html",
            "date": " • Jan 9, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nb.mathnt.net/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nb.mathnt.net/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}